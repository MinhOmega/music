name: Auto-Merge-PRs
#
on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  auto-merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Check PR approvals and merge if approved
        id: merge-step
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          REQUIRED_APPROVERS: ${{ vars.REQUIRED_APPROVERS }}
          BASE_BRANCH: 'developer' # Set this to the branch you want to target
          END_TIME: $(( $(date +%s) + 86400 )) # 24 hours from now
        run: |
          PR_NUMBER=$(jq -r '.pull_request.number' "$GITHUB_EVENT_PATH")
          PR_BASE_BRANCH=$(jq -r '.pull_request.base.ref' "$GITHUB_EVENT_PATH")
          END_TIME=$(($(date +%s) + 86400))

          if [ "$PR_BASE_BRANCH" == "$BASE_BRANCH" ]; then
            APPROVERS=(${REQUIRED_APPROVERS//,/ })
            echo "Required Approvers: ${APPROVERS[@]}"
            while [ "$(date +%s)" -lt "$END_TIME" ]; do
              PR_STATE=$(gh pr view $PR_NUMBER --json state --jq '.state')
              if [ "$PR_STATE" == "closed" ]; then
                echo "PR #$PR_NUMBER is closed. Stopping the process."
                exit 0
              fi

              APPROVED_COUNT=0
              APPROVED_USERS=()

              for APPROVER in "${APPROVERS[@]}"; do
                if gh pr view $PR_NUMBER --json reviews --jq '.reviews[] | select(.author.login=="'$APPROVER'" and .state=="APPROVED")' | grep -q "$APPROVER"; then
                  APPROVED_COUNT=$((APPROVED_COUNT+1))
                  APPROVED_USERS+=("@$APPROVER")
                fi
              done

              echo "Approved Count: $APPROVED_COUNT"

              if [ "$APPROVED_COUNT" -eq "${#APPROVERS[@]}" ]; then
                gh pr merge $PR_NUMBER --squash --repo ${{ github.repository }} --admin
                echo "PR #$PR_NUMBER has been merged."

                # Comment on the PR
                COMMENT="This Pull Request is auto-merged by approval of ${APPROVED_USERS[@]}"
                gh pr comment $PR_NUMBER --body "$COMMENT"
                break
              else
                echo "PR #$PR_NUMBER does not have the required approvals yet. Checking again in 60 seconds..."
                sleep 60
              fi
            done

            if [ "$APPROVED_COUNT" -ne "${#APPROVERS[@]}" ]; then
              echo "PR #$PR_NUMBER did not receive the required approvals within 24 hours."
            fi
          else
            echo "PR does not target the '$BASE_BRANCH' branch. No merge action will be taken."
          fi

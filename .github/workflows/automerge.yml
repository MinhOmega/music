name: Auto Merge PR
#
on:
  pull_request:
    types: [opened, edited, reopened, synchronize, closed, review_requested, review_request_removed, ready_for_review]

jobs:
  auto-merge:
    if: github.event.pull_request.base.ref == 'developer'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get PR reviews
        id: reviews
        uses: tj-actions/branch-protection-bot@v7.4
        with:
          gh_token: ${{ secrets.GH_TOKEN }}
          repository: ${{ github.repository }}
          pull_request_number: ${{ github.event.pull_request.number }}

      - name: Auto merge if approved by required users
        if: ${{ steps.reviews.outputs.reviewers }} == secrets.REQUIRED_APPROVERS
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --squash --admin --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  check-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check approvals
        id: check_approvals
        run: |
          required_approvers=(${{ secrets.REQUIRED_APPROVERS }})
          approvals=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
                        "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" | \
                        jq -r '.[] | select(.state == "APPROVED") | .user.login')

          approved_by_all=true
          for approver in "${required_approvers[@]}"; do
            if [[ ! " ${approvals[@]} " =~ " ${approver} " ]]; then
              approved_by_all=false
              break
            fi
          done

          echo "approved_by_all=$approved_by_all" >> $GITHUB_ENV

      - name: Auto merge if approved by all required users
        if: env.approved_by_all == 'true'
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --squash --admin --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
